@page "/fetchdata"


@using BlazorDash.Data
@using BlazorDash.Services
@using BlazorDash.Models
@using Microsoft.EntityFrameworkCore;
@using BlazorDash.Utility;

@inject IJSRuntime JsRuntime;


@inject StudentService StudentService


<h1>Student's Record</h1>

<p>This component demonstrates fetching data from a service.</p>

@if (Students == null)
{
    <p><em>Loading...</em></p>
}
else
{
    <table class="table">
        <thead>
            <tr>

                <th>
                    <button @onclick="@(e => Sort("last_name"))" class="btn-sort">
                        Last Name
                    </button>
                </th>



                <th>
                    <button @onclick="@(e => Sort("first_mid_name"))" class="btn-sort">
                        First Mid Name
                    </button>
                </th>
                <th>
                    <button @onclick="@(e => Sort("enrollment_date"))" class="btn-sort">
                        Enrollment Date
                    </button>
                </th>

            </tr>
        </thead>
        <tbody>
            @foreach (var student in Students)
            {
                <tr>
                    <td>@student.LastName</td>
                    <td>@student.FirstMidName</td>
                    <td>@student.EnrollmentDate.ToShortDateString()</td>

                </tr>
            }
        </tbody>
    </table>

    <div class="row">
        <div class="col-6">

            <nav aria-label="Page navigation example">
                <ul class="pagination">
                    <li class="page-item@(Students.HasPreviousPage?"":" disabled")">
                        <a class="page-link" href="javascript: void(0);" @onclick="Previous">Previous</a>
                    </li>

                    @for (int i = 0; i < Students.TotalPages; i++)
                    {
                        int index = i + 1;
                        <li class="page-item@(index==PageIndex?" active":"")">
                            <NavLink class="page-link" href="javascript: void(0);" @onclick="@(e => CurrentPage(index))">
                                @(index)
                                @if (index == PageIndex)
                                {
                                    <span class="sr-only">(current)</span>
                                }
                            </NavLink>
                        </li>
                    }




                    <li class="page-item@(Students.HasNextPage?"":" disabled")">
                        <a class="page-link" href="javascript: void(0);" @onclick="Next">Next</a>
                    </li>
                </ul>
            </nav>


        </div>
        <div class="col-6">
            <select @onchange="ChangePageSize">
                <option value="5">
                    5
                </option>
                <option value="10">
                    10
                </option>
                <option value="15">
                    15
                </option>
                <option value="20">
                    20
                </option>
            </select>

        </div>
    </div>


}




@code {
    #region pagination
    [Parameter]
    public int PageIndex { get; set; } = 1;

    [Parameter]
    public int pageSize { get; set; } = 5;
    #endregion




    [Parameter]
    public string sortOrderState { get; set; } = "last_name_asc";

    [Parameter]
    public string LastNameSort { get; set; }

    [Parameter]
    public string FirstMidNameSort { get; set; }

    [Parameter]
    public string EnrollmentDateSort { get; set; }


    public IQueryable<Student> studentsIQ { get; set; }
    public PaginatedList<Student> Students { get; set; }

    public void Sort(string order = "")
    {


        if (order == "last_name")
        {
            if (sortOrderState.Contains("asc"))
            {
                sortOrderState = $"{order}_desc";
            }
            else
            {
                sortOrderState = $"{order}_asc";
            }
        }
        if (order == "first_mid_name")
        {
            if (sortOrderState.Contains("asc"))
            {
                sortOrderState = $"{order}_desc";
            }
            else
            {
                sortOrderState = $"{order}_asc";
            }
        }
        if (order == "enrollment_date")
        {
           if (sortOrderState.Contains("asc"))
            {
                sortOrderState = $"{order}_desc";
            }
            else
            {
                sortOrderState = $"{order}_asc";
            }
        }


        if (sortOrderState.Contains("last_name"))
        {
            if (sortOrderState.Contains("asc"))
            {
                studentsIQ = studentsIQ.OrderBy(order => order.LastName);
                sortOrderState = "last_name_asc";

            }
            else
            {
                studentsIQ = studentsIQ.OrderByDescending(order => order.LastName);
                sortOrderState = "last_name_desc";
            }
        }


        if (sortOrderState.Contains("first_mid_name"))
        {
            if (sortOrderState.Contains("asc"))
            {
                studentsIQ = studentsIQ.OrderBy(order => order.FirstMidName);
                sortOrderState = "first_mid_name_asc";


            }
            else
            {
                studentsIQ = studentsIQ.OrderByDescending(order => order.FirstMidName);
                sortOrderState = "first_mid_name_desc";

            }
        }


        if (sortOrderState.Contains("enrollment_date"))
        {
            if (sortOrderState.Contains("asc"))
            {
                studentsIQ = studentsIQ.OrderBy(order => order.EnrollmentDate);
                sortOrderState = "enrollment_date_asc";


            }
            else
            {
                studentsIQ = studentsIQ.OrderByDescending(order => order.EnrollmentDate);
                sortOrderState = "enrollment_date_desc";

            }
        }




        Students = PaginatedList<Student>.CreateAsync(
                studentsIQ.AsNoTracking(), PageIndex, pageSize);
    }

    public async void Next()
    {
        if (Students.HasNextPage)
        {
            PageIndex = PageIndex + 1;
            await GetAllStudents();
        }

    }

    public async void CurrentPage(int pageIndex)
    {
        PageIndex = pageIndex;

        await GetAllStudents();
    }

    public async void Previous()
    {
        if (Students.HasPreviousPage)
        {
            PageIndex = PageIndex - 1;
            await GetAllStudents();
        }

    }

    public async void ChangePageSize(ChangeEventArgs e)
    {
        pageSize = Convert.ToInt32(e.Value.ToString());
        await GetAllStudents();
    }

    public async Task GetAllStudents()
    {
        try
        {

            studentsIQ = StudentService.GetStudentsQueryable();

            Students = PaginatedList<Student>.CreateAsync(
                    studentsIQ.AsNoTracking(), PageIndex, pageSize);

            //mentain sort state
            Sort();
        }
        catch (Exception ex)
        {

            await JsRuntime.InvokeAsync<string>("alert", $"{ex.Message}");

        }


    }


    protected async override Task OnInitializedAsync()
    {
        await GetAllStudents();

    }



}