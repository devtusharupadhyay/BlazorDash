@page "/fetchdata"
@page "/fetchdata/{sortOrder}"

@using BlazorDash.Data
@using BlazorDash.Services
@using BlazorDash.Models
@using Microsoft.EntityFrameworkCore;
@using BlazorDash.Utility;

@inject IJSRuntime JsRuntime;


@inject StudentService StudentService


<h1>Student's Record</h1>

<p>This component demonstrates fetching data from a service.</p>

@if (Students == null)
{
    <p><em>Loading...</em></p>
}
else
{
    <table class="table">
        <thead>
            <tr>

                <th>
                    <button @onclick="@(e => Sort("last_name"))" class="btn-sort">
                        Last Name
                    </button>
                </th>



                <th>
                    <button @onclick="@(e => Sort("first_mid_name"))" class="btn-sort">
                        First Mid Name
                    </button>
                </th>
                <th>
                    <button @onclick="@(e => Sort("enrollment_date"))" class="btn-sort">
                        Enrollment Date
                    </button>
                </th>

            </tr>
        </thead>
        <tbody>
            @foreach (var student in Students)
            {
                <tr>
                    <td>@student.LastName</td>
                    <td>@student.FirstMidName</td>
                    <td>@student.EnrollmentDate.ToShortDateString()</td>

                </tr>
            }
        </tbody>
    </table>

    <div class="row">
        <div class="col-6">

            <nav aria-label="Page navigation example">
                <ul class="pagination">
                    <li class="page-item disabled">
                        <a class="page-link" href="#" tabindex="-1">Previous</a>
                    </li>

                    @for (int i = 0; i < Students.TotalPages; i++)
                    {
                        int index = i + 1;
                        <li class="page-item@(index==PageIndex?" active":"")">
                            <NavLink class="page-link" href="javascript: void(0);" @onclick="@(e => CurrentPage(index))">
                                @(index)
                                @if (index == PageIndex)
                                {
                                    <span class="sr-only">(current)</span>
                                }
                            </NavLink>
                        </li>
                    }

                 


                    <li class="page-item">
                        <a class="page-link" href="#">Next</a>
                    </li>
                </ul>
            </nav>


        </div>
        <div class="col-6">
            <div class="dropdown">
                <button class="btn btn-secondary dropdown-toggle" type="button" id="dropdownMenuButton" data-toggle="dropdown" aria-haspopup="true" aria-expanded="false">
                    @pageSize
                </button>
                <div class="dropdown-menu" aria-labelledby="dropdownMenuButton">
                    @for (int i = 5; i <= 20; i += 5)
                    {
                                int index = i;
                        <a class="dropdown-item" href="javascript: void(0);" onclick="@(pageSize = index)">@index</a>

                    }
                    
                </div>
            </div>
        </div>
    </div>


}




@code {
    #region pagination
    [Parameter]
    public int PageIndex { get; set; } = 1;

    [Parameter]
    public int pageSize { get; set; } = 5;
    #endregion


    [Parameter]
    public string sortOrder { get; set; }

    [Parameter]
    public string LastNameSort { get; set; }

    [Parameter]
    public string FirstMidNameSort { get; set; }

    [Parameter]
    public string EnrollmentDateSort { get; set; }


    public IQueryable<Student> studentsIQ { get; set; }
    public PaginatedList<Student> Students { get; set; }

    public async void Sort(string order)
    {
        sortOrder = (sortOrder == "sort_desc" ? "sort_asc" : "sort_desc");

        switch (order)
        {

            case "last_name":

                if (sortOrder == "sort_desc")
                {
                    studentsIQ = studentsIQ.OrderByDescending(order => order.LastName);
                }

                if (sortOrder == "sort_asc")
                {
                    studentsIQ = studentsIQ.OrderBy(order => order.LastName);
                }
                break;

            case "first_mid_name":
                if (sortOrder == "sort_desc")
                {
                    studentsIQ = studentsIQ.OrderByDescending(order => order.FirstMidName);
                }

                if (sortOrder == "sort_asc")
                {
                    studentsIQ = studentsIQ.OrderBy(order => order.FirstMidName);
                }
                break;

            case "enrollment_date":
                if (sortOrder == "sort_desc")
                {
                    studentsIQ = studentsIQ.OrderByDescending(order => order.EnrollmentDate);
                }

                if (sortOrder == "sort_asc")
                {
                    studentsIQ = studentsIQ.OrderBy(order => order.EnrollmentDate);
                }
                break;

            default:

                sortOrder = "sort_asc";
                studentsIQ = studentsIQ.OrderBy(order => order.LastName);
                break;


        }

        Students = await PaginatedList<Student>.CreateAsync(
                studentsIQ.AsNoTracking(), PageIndex, pageSize);
    }

    public void  Next()
    {

    }

    public async void CurrentPage(int pageIndex)
    {
        PageIndex = pageIndex;

        await GetAllStudents();
    }

    public void  Previous()
    {

    }

    public async Task GetAllStudents()
    {
        try
        {
            IQueryable<Student> studentsIQ =  StudentService.GetStudentsQueryable();

            Students = await PaginatedList<Student>.CreateAsync(
                    studentsIQ.AsNoTracking(), PageIndex, 5);
        }
        catch (Exception ex)
        {

            await JsRuntime.InvokeAsync<string>("alert", $"{ex.Message}");

        }


    }


    protected async override Task OnInitializedAsync()
    {
        await    GetAllStudents();

    }



}